<Application x:Class="ChatBubbleClientWPF.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:ChatBubbleClientWPF"
             xmlns:controls="clr-namespace:ChatBubbleClientWPF.Controls"        
             xmlns:util="clr-namespace:ChatBubbleClientWPF.Utility" 
             xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
             Startup="Application_Startup">
    <Application.Resources>
        <FontFamily x:Key="Montserrat">/Fonts/#Montserrat-Light</FontFamily>
        <Color x:Key="PrimaryColor">#5D8FD9</Color>
        <Color x:Key="SecondaryColor">White</Color>
        <Color x:Key="AuxillaryColor">#EFEFEF</Color>
        <Color x:Key="SuccessColor">#B6D948</Color>
        <Color x:Key="ErrorColor">#E04834</Color>
        <Color x:Key="IdleColor">#E0EDFF</Color>
        <SolidColorBrush x:Key="PrimaryColorBrush" Color="{StaticResource PrimaryColor}"/>
        <SolidColorBrush x:Key="SecondaryColorBrush" Color="{StaticResource SecondaryColor}"/>
        <SolidColorBrush x:Key="AuxillaryColorBrush" Color="{StaticResource AuxillaryColor}"/>
        <SolidColorBrush x:Key="SuccessColorBrush" Color="{StaticResource SuccessColor}"/>
        <SolidColorBrush x:Key="ErrorColorBrush" Color="{StaticResource ErrorColor}"/>
        <SolidColorBrush x:Key="IdleColorBrush" Color="{StaticResource IdleColor}"/>
        <util:MouseOverBackgroundConverter x:Key="MouseOverBackgroundConverter"/>
        <util:MouseOverTransparencyConverter x:Key="MouseOverTransparencyConverter"/>
        <util:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
        <util:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        <util:BoolToCollapsedConverter x:Key="BoolToCollapsedConverter"/>
        <util:ReverseBoolToVisibilityConverter x:Key="ReverseBoolToVisibilityConverter"/>
        <util:NotificationTypeToStyleConverter x:Key="NotificationTypeToStyleConverter"/>
        <util:MessageStatusToPreviewStyleConverter x:Key="MessageStatusToPreviewStyleConverter"/>
        <util:MessageStatusToVisibilityConverter x:Key="MessageStatusToVisibilityConverter"/>

        <ControlTemplate x:Key="RoundedRectangleButton" TargetType="Button">
            <Grid>
                <Rectangle Name="BackgroundRectangle" Stroke="{TemplateBinding BorderBrush}" Fill="{TemplateBinding Background}" StrokeThickness="2.5" RadiusX="6" RadiusY="6"/>
                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Fill" TargetName="BackgroundRectangle" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}, 
                        Converter={StaticResource MouseOverBackgroundConverter}, ConverterParameter=Hover}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Fill" TargetName="BackgroundRectangle" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}, 
                        Converter={StaticResource MouseOverBackgroundConverter}, ConverterParameter=Click}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <ControlTemplate x:Key="SelectorEllipseButton" TargetType="Button">
            <Grid>
                <Ellipse Name="BackgroundEllipse" Stroke="Black" Opacity="0.0" Fill="Black" StrokeThickness="2.5" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Opacity" TargetName="BackgroundEllipse" Value="{Binding Opacity, RelativeSource={RelativeSource TemplatedParent}, 
                        Converter={StaticResource MouseOverTransparencyConverter}, ConverterParameter=Hover}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter  Property="Opacity" TargetName="BackgroundEllipse"  Value="{Binding Opacity, RelativeSource={RelativeSource TemplatedParent}, 
                        Converter={StaticResource MouseOverTransparencyConverter}, ConverterParameter=Click}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <ControlTemplate x:Key="RoundedRectangleTextBox">
            <Grid>
                <Rectangle IsHitTestVisible="true" Stroke="{TemplateBinding Background}" Fill="{TemplateBinding Background}" StrokeThickness="1" RadiusX="6" RadiusY="6" Margin="1"/>
                <TextBox Name="TextBox" Margin="3" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, UpdateSourceTrigger=PropertyChanged}" 
                         VerticalAlignment="Center" Padding="2,2,2,2" BorderThickness="0" Foreground="{TemplateBinding Foreground}"
                         TextWrapping="{Binding TextWrapping, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                         AcceptsReturn="{Binding AcceptsReturn, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                         MinLines="{Binding MinLines, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                         MaxLines="{Binding MaxLines, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                         FontStyle="{Binding FontStyle, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                         FocusManager.FocusedElement="{Binding ElementName=TextBox}"/>
                <TextBlock Name="WatermarkBlock" IsHitTestVisible="false"  Margin="3" Padding="3.5,2,2,0"  VerticalAlignment="Top"
                       Text="{Binding Watermark, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:RoundedRectangleTextBox}}}"
                       Foreground="{Binding WatermarkColor, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:RoundedRectangleTextBox}}}"
                       Visibility="Hidden"/>
                <Rectangle IsHitTestVisible="false" Stroke="{TemplateBinding BorderBrush}" Fill="Transparent" StrokeThickness="2.5" RadiusX="6" RadiusY="6"/>
            </Grid>
            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding Text, ElementName=TextBox}" Value="">
                    <Setter Property="Visibility" TargetName="WatermarkBlock" Value="Visible"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding MinLines, ElementName=TextBox}" Value="1">
                    <Setter Property="VerticalAlignment" TargetName="WatermarkBlock" Value="Center"/>
                    <Setter Property="Padding" TargetName="WatermarkBlock" Value="3.5,1,2,0"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        
        <ControlTemplate x:Key="RoundedRectanglePasswordBox">
            <Grid>
                <Rectangle IsHitTestVisible="true" Stroke="{TemplateBinding BorderBrush}" Fill="{TemplateBinding Background}" StrokeThickness="2.5" RadiusX="6" RadiusY="6"/>
                <PasswordBox Name="PasswordBox" Margin="3" FontSize="18" VerticalAlignment="Center" Padding="2,2,2,2" BorderThickness="0" PasswordChar="•"
                             TabIndex="{TemplateBinding TabIndex}" IsTabStop="true" Foreground="{TemplateBinding Foreground}"/>
                <TextBlock Name="WatermarkBlock" IsHitTestVisible="false"  Margin="3" Padding="3.5,1,2,0"  VerticalAlignment="Center"
                       Text="{Binding Watermark, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:RoundedRectanglePasswordBox}}}"
                       Foreground="{Binding WatermarkColor, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:RoundedRectanglePasswordBox}}}"
                       Visibility="Hidden"/>
                <Rectangle IsHitTestVisible="false" Stroke="{TemplateBinding BorderBrush}" Fill="Transparent" StrokeThickness="2.5" RadiusX="6" RadiusY="6"/>
            </Grid>
            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding Path=(controls:PasswordWatermarkManager.PasswordLength), ElementName=PasswordBox, Mode=TwoWay}" Value="0">
                    <Setter Property="Visibility" TargetName="WatermarkBlock" Value="Visible"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="{x:Type PasswordBox}" TargetType="{x:Type PasswordBox}">
            <Setter Property="controls:PasswordWatermarkManager.WatermarkEnabled" Value="true"/>
        </Style>

        <ControlTemplate x:Key="DefaultMessageBoxTemplate" TargetType="{x:Type controls:MessageBox}">
            <Grid Name="MessageGrid" Grid.Column="0" Width="auto" Height="auto" MinWidth="26" 
          MaxWidth="300"  MinHeight="20" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
                <Rectangle Name="BackgroundRectangle" Fill="{TemplateBinding Background}" 
                           Stroke="{TemplateBinding BorderBrush}"
                           StrokeThickness="{TemplateBinding BorderThickness}" 
                           RadiusX="6" RadiusY="6"/>
                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4">
                    <ContentPresenter.ContentTemplate>
                        <DataTemplate>
                            <TextBlock Background="Transparent" Padding="0" Margin="0" TextWrapping="Wrap"
                                       Text="{Binding Content, RelativeSource={RelativeSource AncestorType={x:Type controls:MessageBox}}}"
                                       Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type controls:MessageBox}}}"/>
                        </DataTemplate>
                    </ContentPresenter.ContentTemplate>
                </ContentPresenter>
            </Grid>
        </ControlTemplate>
        
        <ControlTemplate x:Key="UnreadMessageBoxTemplate" TargetType="{x:Type controls:MessageBox}">
            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                <Grid Name="MessageGrid" Grid.Column="0" Width="auto" Height="auto" MinWidth="26" 
          MaxWidth="300"  MinHeight="20" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
                    <Rectangle Name="BackgroundRectangle" Fill="{TemplateBinding Background}" 
                           Stroke="{TemplateBinding BorderBrush}"
                           StrokeThickness="{TemplateBinding BorderThickness}" 
                           RadiusX="6" RadiusY="6"/>
                    <Ellipse Width="8" Height="8" 
                             Fill="{StaticResource PrimaryColorBrush}" Margin="-3,0,0,-2"
                             Stroke="{StaticResource SecondaryColorBrush}" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4">
                        <ContentPresenter.ContentTemplate>
                            <DataTemplate>
                                <TextBlock Background="Transparent" Padding="0" Margin="0" TextWrapping="Wrap"
                                       Text="{Binding Content, RelativeSource={RelativeSource AncestorType={x:Type controls:MessageBox}}}"
                                       Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type controls:MessageBox}}}"/>
                            </DataTemplate>
                        </ContentPresenter.ContentTemplate>
                    </ContentPresenter>
                </Grid>
            </StackPanel>
        </ControlTemplate>

        <ControlTemplate x:Key="UnreadSentMessageBoxTemplate" TargetType="{x:Type controls:MessageBox}">
            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                <Grid Name="MessageGrid" Grid.Column="0" Width="auto" Height="auto" MinWidth="26" 
          MaxWidth="300"  MinHeight="20" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
                    <Rectangle Name="BackgroundRectangle" Fill="{TemplateBinding Background}" 
                           Stroke="{TemplateBinding BorderBrush}"
                           StrokeThickness="{TemplateBinding BorderThickness}" 
                           RadiusX="6" RadiusY="6"/>
                    <Ellipse Width="8" Height="8" 
                             Fill="{StaticResource PrimaryColorBrush}" Margin="0,0,-3,-2"
                             Stroke="{StaticResource SecondaryColorBrush}" HorizontalAlignment="Right" VerticalAlignment="Bottom"/>
                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4">
                        <ContentPresenter.ContentTemplate>
                            <DataTemplate>
                                <TextBlock Background="Transparent" Padding="0" Margin="0" TextWrapping="Wrap"
                                       Text="{Binding Content, RelativeSource={RelativeSource AncestorType={x:Type controls:MessageBox}}}"
                                       Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type controls:MessageBox}}}"/>
                            </DataTemplate>
                        </ContentPresenter.ContentTemplate>
                    </ContentPresenter>
                </Grid>
            </StackPanel>
        </ControlTemplate>

        <Style x:Key="LargeTextStyle">
            <Setter Property="Control.Foreground" Value="{StaticResource SecondaryColorBrush}"/>
            <Setter Property="Control.FontSize" Value="28"/>
            <Setter Property="Control.FontFamily" Value="{StaticResource Montserrat}"/>
            <Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
            <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
            <Setter Property="Control.FontWeight" Value="Thin"/>
        </Style>
        <Style x:Key="MediumTextStyle">
            <Setter Property="Control.Foreground" Value="{StaticResource SecondaryColorBrush}"/>
            <Setter Property="Control.FontSize" Value="18"/>
            <Setter Property="Control.FontFamily" Value="{StaticResource Montserrat}"/>
            <Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
            <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
            <Setter Property="Control.FontWeight" Value="Light"/>
        </Style>
        <Style x:Key="SmallTextStyle">
            <Setter Property="Control.Foreground" Value="{StaticResource SecondaryColorBrush}"/>
            <Setter Property="Control.FontSize" Value="14"/>
            <Setter Property="Control.FontFamily" Value="{StaticResource Montserrat}"/>
            <Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
            <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
            <Setter Property="Control.FontWeight" Value="Light"/>
        </Style>
        
        
        <Style x:Key="PrimaryColorStyle" BasedOn="{StaticResource SmallTextStyle}">
            <Setter Property="Control.Background" Value="{StaticResource PrimaryColorBrush}"/>
            <Setter Property="Shape.Fill" Value="{StaticResource PrimaryColorBrush}"/>
            <Setter Property="Path.Fill" Value="{StaticResource PrimaryColorBrush}"/>
            <Setter Property="Shape.Stroke" Value="{StaticResource PrimaryColorBrush}"/>
            <Setter Property="Control.BorderBrush" Value="{StaticResource PrimaryColorBrush}"/>
        </Style>
        <Style x:Key="SecondaryColorStyle" BasedOn="{StaticResource SmallTextStyle}">
            <Setter Property="Control.Background" Value="{StaticResource SecondaryColorBrush}"/>
            <Setter Property="Shape.Fill" Value="{StaticResource SecondaryColorBrush}"/>
            <Setter Property="Path.Fill" Value="{StaticResource SecondaryColorBrush}"/>
            <Setter Property="Control.Foreground" Value="{StaticResource PrimaryColorBrush}"/>
            <Setter Property="Shape.Stroke" Value="{StaticResource SecondaryColorBrush}"/>
            <Setter Property="Control.BorderBrush" Value="{StaticResource SecondaryColorBrush}"/>
        </Style>
        <Style x:Key="AuxillaryColorStyle" BasedOn="{StaticResource SmallTextStyle}">
            <Setter Property="Control.Background" Value="{StaticResource AuxillaryColorBrush}"/>
            <Setter Property="Shape.Fill" Value="{StaticResource AuxillaryColorBrush}"/>
            <Setter Property="Path.Fill" Value="{StaticResource AuxillaryColorBrush}"/>
            <Setter Property="Control.Foreground" Value="{StaticResource PrimaryColorBrush}"/>
            <Setter Property="Shape.Stroke" Value="{StaticResource AuxillaryColorBrush}"/>
            <Setter Property="Control.BorderBrush" Value="{StaticResource AuxillaryColorBrush}"/>
        </Style>
        <Style x:Key="SuccessColorStyle" BasedOn="{StaticResource SmallTextStyle}">
            <Setter Property="Control.Background" Value="{StaticResource SecondaryColorBrush}"/>
            <Setter Property="Shape.Fill" Value="{StaticResource SuccessColorBrush}"/>
            <Setter Property="Path.Fill" Value="{StaticResource SuccessColorBrush}"/>
            <Setter Property="Shape.Stroke" Value="{StaticResource SuccessColorBrush}"/>
            <Setter Property="Control.BorderBrush" Value="{StaticResource SuccessColorBrush}"/>
            <Setter Property="Control.Foreground" Value="{StaticResource SuccessColorBrush}"/>
        </Style>
        <Style x:Key="ErrorColorStyle" BasedOn="{StaticResource SmallTextStyle}">
            <Setter Property="Control.Background" Value="{StaticResource SuccessColorBrush}"/>
            <Setter Property="Shape.Fill" Value="{StaticResource ErrorColorBrush}"/>
            <Setter Property="Path.Fill" Value="{StaticResource ErrorColorBrush}"/>
            <Setter Property="Shape.Stroke" Value="{StaticResource ErrorColorBrush}"/>
            <Setter Property="Control.BorderBrush" Value="{StaticResource ErrorColorBrush}"/>
            <Setter Property="Control.Foreground" Value="{StaticResource ErrorColorBrush}"/>
        </Style>
        <Style x:Key="IdleColorStyle" BasedOn="{StaticResource SmallTextStyle}">
            <Setter Property="Control.Background" Value="{StaticResource IdleColorBrush}"/>
            <Setter Property="Shape.Fill" Value="{StaticResource IdleColorBrush}"/>
            <Setter Property="Path.Fill" Value="{StaticResource IdleColorBrush}"/>
            <Setter Property="Shape.Stroke" Value="{StaticResource IdleColorBrush}"/>
            <Setter Property="Control.BorderBrush" Value="{StaticResource IdleColorBrush}"/>
            <Setter Property="Control.Foreground" Value="{StaticResource IdleColorBrush}"/>
        </Style>
        
        <Style BasedOn="{StaticResource PrimaryColorStyle}" TargetType="{x:Type Button}">
            <Setter Property="Template" Value="{StaticResource RoundedRectangleButton}"/>
            <Setter Property="Background" Value="{StaticResource SecondaryColorBrush}"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="2,3,2,2"/>
        </Style>
        <Style BasedOn="{StaticResource SecondaryColorStyle}" x:Key="SecondaryRoundedButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Template" Value="{StaticResource RoundedRectangleButton}"/>
        </Style>
        <Style BasedOn="{StaticResource AuxillaryColorStyle}" x:Key="AuxillaryRoundedButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Template" Value="{StaticResource RoundedRectangleButton}"/>
        </Style>
        <Style BasedOn="{StaticResource IdleColorStyle}" x:Key="IdleRoundedButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Template" Value="{StaticResource RoundedRectangleButton}"/>
        </Style>

        <Style BasedOn="{StaticResource PrimaryColorStyle}" TargetType="{x:Type controls:RoundedRectangleTextBox}">
            <Setter Property="Template" Value="{StaticResource RoundedRectangleTextBox}"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="WatermarkColor" Value="{StaticResource PrimaryColorBrush}"/>
            <Setter Property="Background" Value="{StaticResource SecondaryColorBrush}"/>
        </Style>
        <Style BasedOn="{StaticResource SecondaryColorStyle}" x:Key="SecondaryRoundedTextBoxStyle" TargetType="{x:Type controls:RoundedRectangleTextBox}">
            <Setter Property="Template" Value="{StaticResource RoundedRectangleTextBox}"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="WatermarkColor" Value="{StaticResource PrimaryColorBrush}"/>
        </Style>
        <Style BasedOn="{StaticResource AuxillaryColorStyle}" x:Key="AuxillaryRoundedTextBoxStyle" TargetType="{x:Type controls:RoundedRectangleTextBox}">
            <Setter Property="Template" Value="{StaticResource RoundedRectangleTextBox}"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="WatermarkColor" Value="{StaticResource PrimaryColorBrush}"/>
        </Style>
        <Style BasedOn="{StaticResource SuccessColorStyle}" x:Key="SuccessRoundedTextBoxStyle" TargetType="{x:Type controls:RoundedRectangleTextBox}">
            <Setter Property="Template" Value="{StaticResource RoundedRectangleTextBox}"/>
            <Setter Property="Foreground" Value="{StaticResource SuccessColorBrush}"/>
            <Setter Property="WatermarkColor" Value="{StaticResource SuccessColorBrush}"/>
        </Style>
        <Style BasedOn="{StaticResource ErrorColorStyle}" x:Key="ErrorRoundedTextBoxStyle" TargetType="{x:Type controls:RoundedRectangleTextBox}">
            <Setter Property="Template" Value="{StaticResource RoundedRectangleTextBox}"/>
            <Setter Property="Foreground" Value="{StaticResource ErrorColorBrush}"/>
            <Setter Property="WatermarkColor" Value="{StaticResource ErrorColorBrush}"/>
        </Style>

        <Style BasedOn="{StaticResource PrimaryColorStyle}" TargetType="{x:Type controls:RoundedRectanglePasswordBox}">
            <Setter Property="Template" Value="{StaticResource RoundedRectanglePasswordBox}"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="Continue"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="WatermarkColor" Value="{StaticResource PrimaryColorBrush}"/>
        </Style>
        <Style BasedOn="{StaticResource SecondaryColorStyle}" x:Key="SecondaryRoundedPasswordBoxStyle" TargetType="{x:Type controls:RoundedRectanglePasswordBox}">
            <Setter Property="Template" Value="{StaticResource RoundedRectanglePasswordBox}"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="Continue"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="WatermarkColor" Value="{StaticResource PrimaryColorBrush}"/>
        </Style>
        <Style BasedOn="{StaticResource AuxillaryColorStyle}" x:Key="AuxillaryRoundedPasswordBoxStyle" TargetType="{x:Type controls:RoundedRectanglePasswordBox}">
            <Setter Property="Template" Value="{StaticResource RoundedRectanglePasswordBox}"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="Continue"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="WatermarkColor" Value="{StaticResource PrimaryColorBrush}"/>
        </Style>
        <Style BasedOn="{StaticResource SuccessColorStyle}" x:Key="SuccessRoundedPasswordBoxStyle" TargetType="{x:Type controls:RoundedRectanglePasswordBox}">
            <Setter Property="Template" Value="{StaticResource RoundedRectanglePasswordBox}"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="Continue"/>
            <Setter Property="Foreground" Value="{StaticResource SuccessColorBrush}"/>
            <Setter Property="WatermarkColor" Value="{StaticResource SuccessColorBrush}"/>
        </Style>
        <Style BasedOn="{StaticResource ErrorColorStyle}" x:Key="ErrorRoundedPasswordBoxStyle" TargetType="{x:Type controls:RoundedRectanglePasswordBox}">
            <Setter Property="Template" Value="{StaticResource RoundedRectanglePasswordBox}"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="Continue"/>
            <Setter Property="Foreground" Value="{StaticResource ErrorColorBrush}"/>
            <Setter Property="WatermarkColor" Value="{StaticResource ErrorColorBrush}"/>
        </Style>

        <Style BasedOn="{StaticResource SecondaryColorStyle}" TargetType="{x:Type controls:FriendTile}">
            <Setter Property="Foreground" Value="{StaticResource SecondaryColorBrush}"/>
        </Style>

        <Style BasedOn="{StaticResource PrimaryColorStyle}" TargetType="{x:Type ContextMenu}">
            <Setter Property="Background" Value="{StaticResource PrimaryColorBrush}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ContextMenu">
                        <Border CornerRadius="6" BorderBrush="{StaticResource PrimaryColorBrush}" Background="{StaticResource PrimaryColorBrush}">
                            <StackPanel IsItemsHost="True"
                                        KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemContainerStyle">
                <Setter.Value>
                    <Style TargetType="MenuItem">
                        <Setter Property="Background" Value="{StaticResource PrimaryColorBrush}"/>
                        <Setter Property="Command" Value="{Binding Command}" />
                        <Setter Property="Header" Value="{Binding Header}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Grid>
                                        <Rectangle x:Name="BackgroundRectangle" Width="{Binding Width, RelativeSource={RelativeSource TemplatedParent}}" Height="24" Stroke="{TemplateBinding BorderBrush}" 
                                                StrokeThickness="2.5" RadiusX="6" RadiusY="6"/>
                                        <TextBlock Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" 
                                                   VerticalAlignment="Center" HorizontalAlignment="Left" Margin="12,0,0,0"
                                                   Style="{StaticResource SmallTextStyle}" Foreground="{StaticResource SecondaryColorBrush}"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Fill" TargetName="BackgroundRectangle" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}, 
                                                    Converter={StaticResource MouseOverBackgroundConverter}, ConverterParameter=Hover}"/>
                                        </Trigger>
                                        <Trigger Property="MenuItem.IsPressed" Value="True">
                                            <Setter Property="Fill" TargetName="BackgroundRectangle" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}, 
                                                    Converter={StaticResource MouseOverBackgroundConverter}, ConverterParameter=Click}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="SelectorEllipseButtonStyle" TargetType="Button">
            <Setter Property="Template" Value="{StaticResource SelectorEllipseButton}"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
        </Style>

        <Style BasedOn="{StaticResource SmallTextStyle}" TargetType="{x:Type controls:MessageLine}"/>

        <Style BasedOn="{StaticResource SmallTextStyle}" TargetType="{x:Type controls:MessageBox}">
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="BorderThickness" Value="2.5"/>
            <Setter Property="BorderBrush" Value="{StaticResource PrimaryColorBrush}"/>
            <Setter Property="Background" Value="{StaticResource PrimaryColorBrush}"/>
            <Setter Property="Template" Value="{StaticResource DefaultMessageBoxTemplate}"/>
        </Style>

        <Style x:Key="SentUnreadMessageBoxStyle" BasedOn="{StaticResource {x:Type controls:MessageBox}}" TargetType="{x:Type controls:MessageBox}">
            <Setter Property="Template" Value="{StaticResource UnreadSentMessageBoxTemplate}"/>
        </Style>

        <Style x:Key="ReceivedUnreadMessageBoxStyle" BasedOn="{StaticResource {x:Type controls:MessageBox}}" TargetType="{x:Type controls:MessageBox}">
            <Setter Property="BorderBrush" Value="{StaticResource PrimaryColorBrush}"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="Background" Value="{StaticResource SecondaryColorBrush}"/>
            <Setter Property="Template" Value="{StaticResource UnreadMessageBoxTemplate}"/>
        </Style>

        <Style x:Key="ReceivedReadMessageBoxStyle" BasedOn="{StaticResource {x:Type controls:MessageBox}}" TargetType="{x:Type controls:MessageBox}">
            <Setter Property="BorderBrush" Value="{StaticResource AuxillaryColorBrush}"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="Background" Value="{StaticResource AuxillaryColorBrush}"/>
        </Style>

        <Style x:Key="FailedMessageBoxStyle" BasedOn="{StaticResource {x:Type controls:MessageBox}}" TargetType="{x:Type controls:MessageBox}">
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="BorderBrush" Value="{StaticResource AuxillaryColorBrush}"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="Foreground" Value="{StaticResource SecondaryColorBrush}"/>
            <Setter Property="Background" Value="{StaticResource ErrorColorBrush}"/>
        </Style>

        <Style BasedOn="{StaticResource SmallTextStyle}" TargetType="{x:Type controls:NotificationTile}">
            <Setter Property="NotificationFill" Value="{StaticResource PrimaryColorBrush}"/>
            <Setter Property="BorderBrush" Value="{StaticResource PrimaryColorBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource SecondaryColorBrush}"/>
        </Style>


        <Style x:Key="ErrorNotificationStyle" BasedOn="{StaticResource  {x:Type controls:NotificationTile}}" TargetType="{x:Type controls:NotificationTile}">
            <Setter Property="NotificationFill" Value="{StaticResource ErrorColorBrush}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ErrorColorBrush}"/>
        </Style>

    </Application.Resources>
</Application>
